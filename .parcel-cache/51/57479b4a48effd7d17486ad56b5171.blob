var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _modelJs = require("./model.js");
var _recipeViewJs = require("./views/recipeView.js");
var _recipeViewJsDefault = parcelHelpers.interopDefault(_recipeViewJs);
var _searchViewJs = require("./views/searchView.js");
var _searchViewJsDefault = parcelHelpers.interopDefault(_searchViewJs);
var _resultsViewJs = require("./views/resultsView.js");
var _resultsViewJsDefault = parcelHelpers.interopDefault(_resultsViewJs);
var _paginationViewJs = require("./views/paginationView.js");
var _paginationViewJsDefault = parcelHelpers.interopDefault(_paginationViewJs);
var _stable = require("core-js/stable");
var _runtime = require("regenerator-runtime/runtime");
const { async  } = require("q");
// https://forkify-api.herokuapp.com/v2
/// against re-load the page ==> parcel feature
// if (module.hot) {
//   module.hot.accept();
// }
///////////////////////////////////////
const controlRecipe = async function() {
    try {
        const id = window.location.hash.slice(1);
        if (!id) return;
        _recipeViewJsDefault.default.renderSpinner();
        // 0) update results view  to mark selected search result 
        _resultsViewJsDefault.default.update(_modelJs.getSearchResultsPage());
        // 1)  Loading recipe
        await _modelJs.loadRecipe(id);
        // 2) Rendering recipe 
        _recipeViewJsDefault.default.render(_modelJs.state.recipe);
    } catch (err) {
        _recipeViewJsDefault.default.renderError();
    }
};
const controlSearchResults = async function() {
    try {
        // 1) get search query 
        _resultsViewJsDefault.default.renderSpinner();
        const query = _searchViewJsDefault.default.getQuery();
        if (!query) return;
        // 2) Load search results 
        await _modelJs.loadSearchReasult(query);
        // 3) Render results
        // resultsView.render(model.state.search.results)
        _resultsViewJsDefault.default.render(_modelJs.getSearchResultsPage(1));
        // 4) Render the initial pagitantion 
        _paginationViewJsDefault.default.render(_modelJs.state.search);
    } catch (err) {
        console.error(err);
    }
};
const controlPagination = function(goToPage) {
    // Render NEW results
    _resultsViewJsDefault.default.render(_modelJs.getSearchResultsPage(goToPage));
    // Render NEW pagination button  
    _paginationViewJsDefault.default.render(_modelJs.state.search);
};
const controlServings = function(newServings) {
    // update the recipe servings (is state)
    _modelJs.updateServings(newServings);
    // Update the recipe view
    // recipeView.render(model.state.recipe)
    _recipeViewJsDefault.default.update(_modelJs.state.recipe);
};
const controlAddBookmark = function() {
    _modelJs.addBookMark(_modelJs.state.recipe);
    console.log(_modelJs.state.recipe);
};
const init = function() {
    _recipeViewJsDefault.default.addHandlerRender(controlRecipe);
    // listening to increase or decrease 
    _recipeViewJsDefault.default.addHandlerUpdateServings(controlServings);
    // listening to bookmark button click 
    _recipeViewJsDefault.default.addHandlerAddBookmark(controlAddBookmark);
    _searchViewJsDefault.default.addHandlerSearch(controlSearchResults);
    _paginationViewJsDefault.default.addHandlerClick(controlPagination);
};
init();
